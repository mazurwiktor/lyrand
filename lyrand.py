import argparse
import csv
import json

from typing import List, Tuple

from generate import line_per_track, line_per_track_syllables, line_per_track_rhymes
from download import download_lyrics


def newline2list(raw_str: str) -> List[str]:
    return list(filter(None, raw_str.split("\n")))


def csv2list(path: str) -> List[Tuple[str, str]]:
    with open(path) as f:
        reader = csv.reader(f)
        next(reader, None)  # drop header
        return [(r[2], r[1]) for r in reader]


def download(paths_in: List[str], path_out: str) -> None:
    def flatten(l):
        return [item for sublist in l for item in sublist]

    tracks = flatten([csv2list(path) for path in paths_in])
    lyrics = download_lyrics(tracks)

    print("downloaded lyrics for {} out of {} tracks".format(len(lyrics), len(tracks)))

    if path_out:
        with open(path_out, "w") as f:
            json.dump(list(lyrics), f)
    else:
        print(json.dumps(list(lyrics), indent=2))


def generate(path_in: str, max_lines: int, syllables: int, rhymes: bool) -> None:
    with open(path_in) as f:
        data = json.load(f)
        tracks = [newline2list(t[2]) for t in data]

        if syllables:
            result = line_per_track_syllables(tracks, syllables)
        elif rhymes:
            if max_lines and max_lines % 2 != 0:
                print("odd max-lines!")
                return
            result = line_per_track_rhymes(tracks)
        else:
            result = line_per_track(tracks)

        if max_lines:
            result = result[:max_lines]
        for line in result:
            print(line)


def get_args():
    pp = argparse.ArgumentParser(add_help=False)
    ap = argparse.ArgumentParser(description="generate random lyrics out of given titles")
    sp = ap.add_subparsers(title="subcommands", dest="subcommand")
    sp.required = True

    sp_download = sp.add_parser("download", help="download and store lyrics", parents=[pp])
    sp_download.add_argument("input", help="paths to csv files generated by Exportify", nargs="+")
    sp_download.add_argument("-o", "--output", help="path to .json file to be dumped")

    sp_generate = sp.add_parser("generate", help="generate lyrics", parents=[pp])
    sp_generate.add_argument("input", help="path to json dump with downloaded lyrics")
    sp_generate.add_argument("--max-lines", help="max length of output record", type=int)
    sp_generate.add_argument("--syllables", help="exact number of syllables for each line", type=int)
    sp_generate.add_argument("--rhymes", help="rhymes!", action="store_true")

    return ap.parse_args()


def main():
    args = get_args()
    if args.subcommand == "download":
        download(args.input, args.output)
    elif args.subcommand == "generate":
        generate(args.input, args.max_lines, args.syllables, args.rhymes)


if __name__ == "__main__":
    main()
