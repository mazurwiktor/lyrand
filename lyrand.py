import argparse
import csv
import json
import multiprocessing
import plyr


def csv2list(path):
    with open(path) as f:
        reader = csv.reader(f)
        next(reader, None)  # drop header
        return [(r[2], r[1]) for r in reader]


def fetch_lyrics(artist, title):
    query = plyr.Query(artist=artist, title=title, get_type="lyrics")
    items = query.commit()
    if not items:
        print("ERROR: {} - {} has no lyrics".format(artist, title))
        return None
    decoded = items[0].data.decode("utf-8")
    if decoded == "Instrumental":
        return None
    return decoded


def sanitize(txt):
    return txt.split("-")[0]


def fetch_lyrics_threaded(artist, title, storage):
    lyrics = fetch_lyrics(artist, title)
    if lyrics:
        storage.append((artist, title, lyrics))


def get_args():
    pp = argparse.ArgumentParser(add_help=False)
    ap = argparse.ArgumentParser(description="generate random lyrics out of given titles")
    sp = ap.add_subparsers(title="subcommands", dest="subcommand")
    sp.required = True

    sp_download = sp.add_parser("download", help="download and store lyrics", parents=[pp])
    sp_download.add_argument("input", help="paths to csv files generated by Exportify", nargs="+")
    sp_download.add_argument("-o", "--output", help="path to .json file to be dumped", default="./out.json")

    sp_generate = sp.add_parser("generate", help="generate lyrics", parents=[pp])
    sp_generate.add_argument("input", help="path to json dump with downloaded lyrics")

    print(ap.parse_args())
    return ap.parse_args()


def download(paths_in, path_out):
    def flatten(l):
        return [item for sublist in l for item in sublist]

    tracks = [csv2list(path) for path in paths_in]

    manager = multiprocessing.Manager()
    lyrics = manager.list()

    processes = []

    for artist, title in flatten(tracks)[:20]:
        p = multiprocessing.Process(target=fetch_lyrics_threaded, args=(artist, title, lyrics))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()

    with open(path_out, "w") as f:
        json.dump(list(lyrics), f)


def main():
    args = get_args()
    if args.subcommand == "download":
        download(args.input, args.output)
    elif args.subcommand == "generate":
        generate()


if __name__ == "__main__":
    main()
